import { JWKInterface } from 'arweave/node/lib/wallet';

type ConfigName = string;
interface Tag {
    name: string;
    value: string;
}
interface DeployConfig {
    /**
     * Process name to spawn
     * @default "default"
     */
    name?: string;
    /**
     * Path to contract main file
     */
    contractPath: string;
    /**
     * The module source to use to spin up Process
     * @default "Fetches from `https://raw.githubusercontent.com/permaweb/aos/main/package.json`"
     */
    module?: string;
    /**
     * Scheduler to use for Process
     * @default "_GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA"
     */
    scheduler?: string;
    /**
     * Additional tags to use for spawning Process
     */
    tags?: Tag[];
    /**
     * Cron interval to use for Process i.e (1-minute, 5-minutes)
     */
    cron?: string;
    /**
     * Wallet path or JWK itself
     */
    wallet?: JWKInterface | string;
    /**
     * lua path to find the lua modules
     */
    luaPath?: string;
    /**
     * Config name used for logging
     */
    configName?: string;
    /**
     * Retry options
     */
    retry?: {
        /**
         * Retry count
         * @default 10
         */
        count?: number;
        /**
         * Retry delay in milliseconds
         * @default 3000
         */
        delay?: number;
    };
    /**
     * Concurrency limit to deploy multiple processes
     */
    concurrency?: number;
    /**
     * Process Id of an existing process
     */
    processId?: string;
}
type Config = Record<ConfigName, DeployConfig>;
interface DeployResult {
    name: string;
    configName: string;
    messageId: string;
    processId: string;
    isNewProcess: boolean;
}

/**
 * Manages deployments of contracts to AO.
 */
declare class DeploymentsManager {
    #private;
    /**
     * Deploys or updates a contract on AO.
     * @param {DeployConfig} deployConfig - Configuration options for the deployment.
     * @returns {Promise<DeployResult>} The result of the deployment.
     */
    deployContract({ name, wallet, contractPath, tags, cron, module, scheduler, retry, luaPath, configName, processId }: DeployConfig): Promise<DeployResult>;
    /**
     * Deploys multiple contracts concurrently with specified concurrency limits.
     * @param {DeployConfig[]} deployConfigs - Array of deployment configurations.
     * @param {number} concurrency - Maximum number of deployments to run concurrently. Default is 5.
     * @returns {Promise<PromiseSettledResult<DeployResult>[]>} Array of results for each deployment, either fulfilled or rejected.
     */
    deployContracts(deployConfigs: DeployConfig[], concurrency?: number): Promise<PromiseSettledResult<DeployResult>[]>;
}
/**
 * Deploys or updates a contract on AO.
 * @param {DeployConfig} deployConfig - Configuration options for the deployment.
 * @returns {Promise<DeployResult>} The result of the deployment.
 */
declare function deployContract(deployConfig: DeployConfig): Promise<DeployResult>;
/**
 * Deploys multiple contracts concurrently with specified concurrency limits.
 * @param {DeployConfig[]} deployConfigs - Array of deployment configurations.
 * @param {number} concurrency - Maximum number of deployments to run concurrently. Default is 5.
 * @returns {Promise<PromiseSettledResult<DeployResult>[]>} Array of results for each deployment, either fulfilled or rejected.
 */
declare function deployContracts(deployConfigs: DeployConfig[], concurrency?: number): Promise<PromiseSettledResult<DeployResult>[]>;

/**
 * Defines and validates a configuration object.
 * @param config The configuration object to validate.
 * @returns The validated configuration object.
 * @throws Error if the configuration object is invalid.
 */
declare function defineConfig(config: Config): Config;

export { DeploymentsManager, defineConfig, deployContract, deployContracts };
